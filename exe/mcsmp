#!/usr/bin/env ruby
# frozen_string_literal: true

require 'mcsmp'
require 'thor'
autoload :MCSMP, 'lib/mcsmp'

# The main CLI
class MCSMPCLI < Thor
  desc 'run PATH', 'Run a MineCraft instance at the target PATH'
  def run_server(path = File.absolute_path(Dir.pwd))
    instance = MCSMP::ServerInstance.from_existing(path)
    runner = MCSMP::ServerRunner.new(instance)
    runner.start_sync
  end

  desc 'pry PATH', 'Run an PRY console at the target folder and get all'\
    'server instances in it'
  method_option :with_server, aliases: '-s', desc: 'Start the connector as well'
  method_option :no_autostart, aliases: '-A'
  method_option :connector_secret, aliases: '-c'
  def pry_start(path = File.absolute_path(Dir.pwd))
    require 'pry'

    abort('Secret must be provided if used with the server!') if
        options[:with_server] && !options[:connector_secret]

    instances = MCSMP::Util.get_instances(path)
    runners = get_runners(instances)
    autostart(runners) unless options[:no_autostart]
    if options[:with_server]
      MCSMP::HTTPConnector.configuration = {
        instances: instances,
        secret: options[:connector_secret],
        runners: runners
      }
      Thread.new { MCSMP::HTTPConnector.run! }
    end
    pry(Struct.new(:instances, :runners).new(instances, runners))
    MCSMP::HTTPConnector.quit! if options[:with_server]
    runners.each(&:stop)

  rescue LoadError
    warn 'Install PRY to use this option: gem install pry'
  end

  desc 'start-server PATH', 'Start in connector mode'
  method_option :no_autostart, aliases: '-A'
  method_option :secret, required: true, aliases: '-c'
  def start_connector(path = File.absolute_path(Dir.pwd))
    instances = MCSMP::Util.get_instances(path)
    runners = get_runners(instances)
    autostart(runners) unless options[:no_autostart]
    MCSMP::HTTPConnector.configuration = {
      instances: instances,
      secret: options[:secret],
      runners: runners
    }
    MCSMP::HTTPConnector.run!
    runners.each(&:stop)
  end

  private

  def get_runners(instances)
    runners = []
    instances.each do |instance|
      next unless instance.exists?

      runner = MCSMP::ServerRunner.new(instance)
      runners.push(runner)
    end
    runners
  end

  def autostart(runners)
    runners.each do |r|
      next if File.exist?(File.join(r.instance.physical_path, '.autorun'))

      r.start_async
    end
  end
end

MCSMPCLI.start
